KSON = require 'kson'
testClient = require '../fixtures/test_client'
app = require '../fixtures/test_server'

describe "var_query", ()->
  beforeEach ()->
    app.listen 9999
  
  afterEach ()->
    app.close()

  it "should not crash server when given a var_query object", (done)->
    post_data = KSON.stringify(
      "origin_url": "http://localhost:9999/var_query"
      "columns": [{
        "col_name": "variable in dom"
        "var_query": "something"
      }]
    )

    testClient post_data, (response_obj)=>
      done() 

  it "should add to existing row generated by the dom_elements middleware", (done)->
    post_data = KSON.stringify(
      "origin_url": "http://localhost:9999/var_query_ensure_row"
      "columns": [{
          "col_name": "variable in dom"
          "var_query": "something"
        },{
          "col_name": "some html stuff"
          "dom_query": "div#something"
      }]
    ) 
    testClient post_data, (response_obj)=>
      done()

  it "should extract nested attributes in the variable JSON object", (done)->
    post_data = KSON.stringify(
      "origin_url": "http://localhost:9999/var_query_nested_json"
      "columns": [{
          "col_name": "some html stuff"
          "var_query": "something[0]"
      }]
    ) 
    testClient post_data, (response_obj)=>
      done()

  it "should not crash server when given a var_query object that extracts attributes from a non-existent JSON variable", (done)->
    post_data = KSON.stringify(
      "origin_url": "http://localhost:9999/var_query_non_existent_json"
      "columns": [{
        "col_name": "variable in dom"
        "var_query": "something"
      }]
    )

    testClient post_data, (response_obj)=>
      done() 